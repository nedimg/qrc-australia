package net.homemade.volume
{
	import flash.events.EventDispatcher;
	import flash.events.StatusEvent;
	import flash.external.ExtensionContext;
	
	import net.homemade.volume.events.VolumeEvent;

	public class VolumeController extends EventDispatcher
	{
		private static var _instance:VolumeController;
		private var extContext:ExtensionContext;
		
		private var _systemVolume:Number = NaN;
		
		public function get systemVolume():Number 
		{
			return _systemVolume;
		}
		
		public function set systemVolume(value:Number):void 
		{
			if (_systemVolume == value)
				return;
			
			_systemVolume = value;
		}
		
		public static function get instance():VolumeController
		{
			if (!_instance)
			{
				_instance = new VolumeController(new SingletonEnforcer());
				_instance.init();
			}
			
			return _instance;
		}
		
		public function VolumeController(enforcer:SingletonEnforcer)
		{
			super();
	
			extContext = ExtensionContext.createExtensionContext( "net.homemade.volume", "" );
			
			if ( !extContext ) 
			{
				throw new Error( "Volume native extension is not supported on this platform." );
			}
			
			extContext.addEventListener(StatusEvent.STATUS, onStatus);
		}
		
		private function onStatus(event:StatusEvent):void
		{
			systemVolume = Number(event.level);
			
			dispatchEvent(new VolumeEvent(VolumeEvent.VOLUME_CHANGED, systemVolume, false, false ));
		}
		
		private function init():void 
		{
			extContext.call("init");
		}
		
		public function setVolume(newVolume:Number):void
		{
			if ( isNaN(newVolume) )
			{
				newVolume = 1;
			}
			
			if ( newVolume < 0 )
			{
				newVolume = 0;
			}
			
			if ( newVolume > 1 )
			{
				newVolume = 1;
			}
			
			extContext.call("setVolume", newVolume);
			systemVolume = newVolume;
		}
	}
}

class SingletonEnforcer {
	
}