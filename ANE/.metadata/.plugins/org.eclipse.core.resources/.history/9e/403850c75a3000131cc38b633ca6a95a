package com.sbhave.nativeExtensions.zbar
{
	import flash.desktop.NativeProcess;
	import flash.desktop.NativeProcessStartupInfo;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.events.NativeProcessExitEvent;
	import flash.events.ProgressEvent;
	import flash.events.StatusEvent;
	import flash.external.ExtensionContext;
	import flash.filesystem.File;
	import flash.filesystem.FileMode;
	import flash.filesystem.FileStream;


    public class Scanner extends EventDispatcher {  
	
		
		private static var extCtx:ExtensionContext = null;
        
        private static var isInstantiated:Boolean = false;
        
        
		
		// Scanner constructor
        //
        
        public function Scanner()
		{ 
			
			if (!isInstantiated)
			{
				extCtx = ExtensionContext.createExtensionContext("com.sbhave.nativeExtensions.zbar", null);
				
				if (extCtx != null)
				{
					extCtx.addEventListener(StatusEvent.STATUS, onStatus);
				}
				else
				{
					throw new Error("Extension not supported");
				} 
			
				isInstantiated = true;
			}
			
		}
		
		private static var 
		callback_error:Function = null, 
			callback_ioerror:Function = null, 
			callback_output:Function = null;
		
		/** @param extensionID:String id of the ane extension to fix
		 * @param onExit:Function callback function with first arguments the value of extensionID and for the second the boolean state of the fix operation
		 **/
		private function fixANE(extensionID:String, onExit:Function=null):Boolean {
			if (!NativeProcess.isSupported) {
				if (onExit!=null)
					onExit(extensionID, false);
				return false;
			}
			// init event listners 
			if (callback_output==null)
				callback_output = 
					function(event:ProgressEvent):void {
						var process:NativeProcess = event.target as NativeProcess;
						trace("OUT -", process.standardOutput.readUTFBytes(process.standardError.bytesAvailable)); 
					};
			if (callback_error==null)
				callback_error = 
					function(event:ProgressEvent):void {
						var process:NativeProcess = event.target as NativeProcess;
						trace("ERROR -", process.standardError.readUTFBytes(process.standardError.bytesAvailable)); 
					};
			if (callback_ioerror==null)
				callback_ioerror = 
					function(event:IOErrorEvent):void {
						trace(event.toString());
					};
			
			var ext_dir:File;
			try {
				ext_dir = ExtensionContext.getExtensionDirectory(extensionID);
			} catch (e:*) {
				if (onExit!=null)
					onExit(extensionID, false);
				return false;
			}
			if (!ext_dir.isDirectory) {
				if (onExit!=null)
					onExit(extensionID, false);
				return false;
			}
			var ane_dir:File = ext_dir.resolvePath("META-INF/ANE/");
			var ext_stream:FileStream = new FileStream();
			ext_stream.open(ane_dir.resolvePath("extension.xml"), FileMode.READ);
			var ext_xml:XML = XML(ext_stream.readUTFBytes(ext_stream.bytesAvailable));
			ext_stream.close();
			
			var defaultNS:Namespace = ext_xml.namespace("");
			var framework:String = ext_xml.defaultNS::platforms.defaultNS::platform.(@name=="MacOS-x86").defaultNS::applicationDeployment.defaultNS::nativeLibrary.text();
			if (!framework) {
				if (onExit!=null)
					onExit(extensionID, false);
				return false;
			}
			
			var framework_dir:File = ane_dir.resolvePath('MacOS-x86/'+framework);
			// list of symlink files
			var symlink:Vector.<String> = new Vector.<String>(3, true);
			symlink[0] = 'Resources';
			symlink[1] = framework_dir.name.substr(0, framework_dir.name.length-framework_dir.extension.length-1);
			symlink[2] = 'Versions/Current';
			var fileToFix:int = symlink.length,
				fileFixed:int = 0,
				fileFailed:int = 0;
			symlink.every(
				function(item:String, index:int, a:Vector.<String>):Boolean {
					var f:File = framework_dir.resolvePath(item);
					if (!f.isSymbolicLink) {
						var fs:FileStream = new FileStream();
						fs.open(f, FileMode.READ);
						var lnk:String = fs.readUTFBytes(fs.bytesAvailable);
						fs.close();                        
						var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
						nativeProcessStartupInfo.executable = new File('/bin/ln');
						nativeProcessStartupInfo.workingDirectory = f.parent;
						nativeProcessStartupInfo.arguments = new Vector.<String>(3, true);
						nativeProcessStartupInfo.arguments[0] = "-Fs";
						nativeProcessStartupInfo.arguments[1] = lnk;
						nativeProcessStartupInfo.arguments[2] = f.name;
						
						
						var process:NativeProcess = new NativeProcess();    
						process.start(nativeProcessStartupInfo);
						//process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, callback_output);
						process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, callback_error);
						process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, callback_ioerror);
						process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, callback_ioerror);
						process.addEventListener(
							NativeProcessExitEvent.EXIT, 
							function (event:NativeProcessExitEvent):void {
								if (event.exitCode==0)
									fileFixed++;
								else
									fileFailed++
								
								if (fileFixed+fileFailed==fileToFix) {
									if (fileFailed==0) 
										trace('ANE '+extensionID+' fixed.');
									else
										trace('Unable to fix ANE '+extensionID+'!');
									if (onExit!=null)
										onExit(extensionID, fileFailed==0);
								}
							}
						);
					} else
						fileFixed++;
					return true;
				}
			);
			return true;
		}
	
        // isSupported()
        //
        // Use this static method to determine whether the device
        // has ability to do barcode scanning. As of now we dont have real world use case
		// where we can not do scanning so just return true.
		// Its good practice to use this function in application right from beginning, so that
		// implementing it in future wont require application code changes.
        
        public static function get isSupported():Boolean
		{
			if(CONFIG::simulator)
				return false;
			
			return true; 
		}
        
		//This function is used to set different caliberation and configuration parameters
		//for the Zbar Scanner. Please use Constants defined in Config and Symbology Class 
		// as values for first two parameters. for reference on values to be set or meaning of parameters
		// see http://zbar.sourceforge.net/iphone/sdkdoc/ZBarImageScanner.html#constants
		public function setConfig(symbology:int,config:int,value:int):void{
			extCtx.call("setConfig",symbology,config,value);
		}
		
		// dispose()
        //
		// Call this when application is done with Scanner usage. Note that this method will free-up
		// all the resources held and acquiring those again can be a heavy process. Hence, call this
		// method only when you know that Scanner will not be needed at all or when you are suspending etc.
		// In case your application allows to do scanning again and again DONT call this method after each scan.
        
        public function dispose():void {
			extCtx.dispose();
			extCtx = null;
			isInstantiated = false;
		}
		 
		//reset()
		//
		// If you have calibrated the scanner using setConfig(). Calling this method will put the
		// Scanner to default settings
		
		public function reset():void
		{
			extCtx.call("reset");
		}
		
		//launch()
		//
		//launches the barcode scanner if not running already.
		//singleScan: if true will fire a DATA event and return to the application UI as soon as Scanner has found
		//at least 1 code. If false, the scanner will never return to the application and will keep firing DATA events
		//only way to bring user back to application is by calling stop() function.
		
		public function launch(singleScan:Boolean,cameraLocation:String="back"):Boolean
		{
			var ret:Object = extCtx.call("start",singleScan,cameraLocation);
			
			if(ret==null)
				return false;
			else
				return ret as Boolean;
		}
        
		// This function sets the size and colors for the target area.
		// This function must be called before calling launch().
		// by default UI will not show any target area.
		public function setTargetArea(size:int, color:String, successColor:String):void
		{
			extCtx.call("targetArea",size,color,successColor);
		}
		
		
		public function get launched():Boolean
		{
			var ret:Object = extCtx.call("launchStatus");
			
			if(ret==null)
				return false;
			else
				return ret as Boolean;
		}
		
		
		public function stop():Boolean
		{
			var ret:Object = extCtx.call("stop");
			
			if(ret==null)
				return false;
			else
				return ret as Boolean;
		}
		
        // onStatus()
        // Event handler for the event that the native implementation dispatches.
        // The event contains the latest gyroscope x,y,z data.
        //
        
        private function onStatus(e:StatusEvent):void {
			
			trace("Received Event: " + e.code)
			switch(e.code)	{
				case "data":
					dispatchEvent(new ScannerEvent(ScannerEvent.SCAN,e.level));
					break;
			}
		}
	}
}